else if(rand_val < 0.75){
++loc_y
}
else{
--loc_y
}
}
sum_dist = sum_dist + loc_x + loc_y
}
return(wrap(sum_dist/N1));
'
rw_dist <- cxxfunction(body = rand_walk_dist,
plugin = "Rcpp")
rand_walk_dist <- '
int N1 = 1000;
int N1 = 50;
int loc_x ;
int loc_y ;
double sum_dist = 0;
double rand_val = rand() / double(RAND_MAX);
for (int i = 1; i <= N1; i++) {
loc_x = 0;
loc_y = 0;
for (int j = 1; j <= N1; j++) {
rand_val = rand() / double(RAND_MAX);
if( rand_val < 0.25 ){
++loc_x
}
else if(rand_val < 0.5){
--loc_x
}
else if(rand_val < 0.75){
++loc_y
}
else{
--loc_y
}
}
sum_dist = sum_dist + loc_x + loc_y
}
return(wrap(sum_dist));
'
rw_dist <- cxxfunction(body = rand_walk_dist,
plugin = "Rcpp")
rand_walk_dist <- '
int N1 = 1000;
int N1 = 50;
int loc_x ;
int loc_y ;
int sum_dist = 0;
double rand_val = rand() / double(RAND_MAX);
for (int i = 1; i <= N1; i++) {
loc_x = 0;
loc_y = 0;
for (int j = 1; j <= N1; j++) {
rand_val = rand() / double(RAND_MAX);
if( rand_val < 0.25 ){
++loc_x
}
else if(rand_val < 0.5){
--loc_x
}
else if(rand_val < 0.75){
++loc_y
}
else{
--loc_y
}
}
sum_dist = sum_dist + loc_x + loc_y
}
return(wrap(sum_dist));
'
rw_dist <- cxxfunction(body = rand_walk_dist,
plugin = "Rcpp")
rw_dist <- cxxfunction(signature(),
body = rand_walk_dist,
plugin = "Rcpp")
rand_walk_dist <- '
int N1 = 1000;
int N1 = 50;
int loc_x ;
int loc_y ;
int sum_dist = 0;
double rand_val = rand() / double(RAND_MAX);
for (int i = 1; i <= N1; i++) {
loc_x = 0;
loc_y = 0;
for (int j = 1; j <= N1; j++) {
rand_val = rand() / double(RAND_MAX);
if( rand_val < 0.25 ){
++loc_x ;
}
else if(rand_val < 0.5){
--loc_x ;
}
else if(rand_val < 0.75){
++loc_y
}
else{
--loc_y;
}
}
sum_dist = sum_dist + loc_x + loc_y;
}
return(wrap(sum_dist));
'
rw_dist <- cxxfunction(signature(),
body = rand_walk_dist,
plugin = "Rcpp")
rand_walk_dist <- '
int N1 = 1000;
int N1 = 50;
int loc_x ;
int loc_y ;
int sum_dist = 0;
double rand_val = rand() / double(RAND_MAX);
for (int i = 1; i <= N1; i++) {
loc_x = 0;
loc_y = 0;
for (int j = 1; j <= N1; j++) {
rand_val = rand() / double(RAND_MAX);
if( rand_val < 0.25 ){
++loc_x ;
}
else if(rand_val < 0.5){
--loc_x ;
}
else if(rand_val < 0.75){
++loc_y ;
}
else{
--loc_y;
}
}
sum_dist = sum_dist + loc_x + loc_y;
}
return(wrap(sum_dist));
'
rw_dist <- cxxfunction(signature(),
body = rand_walk_dist,
plugin = "Rcpp")
rand_walk_dist <- '
int N1 = 1000;
int N2 = 50;
int loc_x ;
int loc_y ;
int sum_dist = 0;
double rand_val = rand() / double(RAND_MAX);
for (int i = 1; i <= N1; i++) {
loc_x = 0;
loc_y = 0;
for (int j = 1; j <= N2; j++) {
rand_val = rand() / double(RAND_MAX);
if( rand_val < 0.25 ){
++loc_x ;
}
else if(rand_val < 0.5){
--loc_x ;
}
else if(rand_val < 0.75){
++loc_y ;
}
else{
--loc_y;
}
}
sum_dist = sum_dist + loc_x + loc_y;
}
return(wrap(sum_dist));
'
rw_dist <- cxxfunction(signature(),
body = rand_walk_dist,
plugin = "Rcpp")
rw_dist()
rand_walk_dist <- '
int N1 = 1000;
int N2 = 50;
int loc_x ;
int loc_y ;
double sum_dist = 0.0;
double rand_val = rand() / double(RAND_MAX);
for (int i = 1; i <= N1; i++) {
loc_x = 0;
loc_y = 0;
for (int j = 1; j <= N2; j++) {
rand_val = rand() / double(RAND_MAX);
if( rand_val < 0.25 ){
++loc_x ;
}
else if(rand_val < 0.5){
--loc_x ;
}
else if(rand_val < 0.75){
++loc_y ;
}
else{
--loc_y;
}
}
sum_dist = sum_dist + abs(loc_x) + abs(loc_y);
}
return(wrap(sum_dist));
'
rw_dist <- cxxfunction(signature(),
body = rand_walk_dist,
plugin = "Rcpp")
rw_dist()
rand_walk_dist <- '
int N1 = 1000;
int N2 = 50;
int loc_x ;
int loc_y ;
double sum_dist = 0.0;
double rand_val = rand() / double(RAND_MAX);
for (int i = 1; i <= N1; i++) {
loc_x = 0;
loc_y = 0;
for (int j = 1; j <= N2; j++) {
rand_val = rand() / double(RAND_MAX);
if( rand_val < 0.25 ){
++loc_x ;
}
else if(rand_val < 0.5){
--loc_x ;
}
else if(rand_val < 0.75){
++loc_y ;
}
else{
--loc_y;
}
}
sum_dist = sum_dist + abs(loc_x) + abs(loc_y);
}
return(wrap(sum_dist/N1));
'
rw_dist <- cxxfunction(signature(),
body = rand_walk_dist,
plugin = "Rcpp")
rw_dist()
body_bubblesortOpt2 <- '
IntegerVector xx = clone ( x ) ;                                  // use of clone ( )
int n = xx.size( ) ;                                               // no . of elements
int temp ;                                                        // temporary storage of swap value
int wasSwap = 1 ;                                                 // to test whether a swap was made on pass k
// set wasSwap too if no swap was made , 1 otherwise
// for pass k , continue if k <= n-1 AND a swap was made on previous pass
for ( int k = 1 ; ( k <= n - 1 ) && ( wasSwap == 1 ) ; k++ ) {
wasSwap = 0 ;
// so far , no swap has been made on this pass , so set to zero
// loop over pairs of elements
// modified i < n-1 t o i < n-k t o
// avoid passing over elements that
// are alreadysorted
for ( int i = 0 ; i < n - k ; i ++ ) {
i f ( xx [ i ] > xx [ i +1 ] ) {
temp = xx [ i + 1 ] ;
xx [ i + 1 ] = xx [ i ] ;
xx [ i ] = temp ;
wasSwap = 1 ;                                            // indicate that a swap was made
}
}                                                          // end of loop over array pairs
}                                                            // end of loop over passes
return ( wrap ( xx ) ) ;
'
bubblesortOpt2 <- cxxfunction ( signature ( x = " integer"  ) ,
body = body_bubblesortOpt2 ,
plugin = "Rcpp" )
body_bubblesortOpt2 <- '
IntegerVector xx = clone ( x ) ;                                  // use of clone ( )
int n = xx.size( ) ;                                               // no . of elements
int temp ;                                                        // temporary storage of swap value
int wasSwap = 1 ;                                                 // to test whether a swap was made on pass k
// set wasSwap too if no swap was made , 1 otherwise
// for pass k , continue if k <= n-1 AND a swap was made on previous pass
for ( int k = 1 ; ( k <= n - 1 ) && ( wasSwap == 1 ) ; k++ ) {
wasSwap = 0 ;
// so far , no swap has been made on this pass , so set to zero
// loop over pairs of elements
// modified i < n-1 t o i < n-k t o
// avoid passing over elements that
// are alreadysorted
for ( int i = 0 ; i < n - k ; i ++ ) {
if ( xx [ i ] > xx [ i +1 ] ) {
temp = xx [ i + 1 ] ;
xx [ i + 1 ] = xx [ i ] ;
xx [ i ] = temp ;
wasSwap = 1 ;                                            // indicate that a swap was made
}
}                                                          // end of loop over array pairs
}                                                            // end of loop over passes
return ( wrap ( xx ) ) ;
'
bubblesortOpt2 <- cxxfunction ( signature ( x = "integer"  ) ,
body = body_bubblesortOpt2 ,
plugin = "Rcpp" )
x <- as.integer ( sample ( 1:100 , size = 100 , replace = FALSE ) )
sorted_x <- bubblesortOpt2(x) #sorts x
sorted_x #sorted x is sorted
x #x is not sorted
PATH_WD = 'C:/Users/denis/Documents/GitHub/DAC_Project/R/'
setwd(PATH_WD)
PATH_DB = "C:/Users/denis/Documents/ACM40960 - Projects in Maths Modelling/database/"
FILES_DB = c('train_data','train_labels')
packages = c(
"glue",
"chunked",
"arrow",
"sparklyr",
"LaF",
"microbenchmark",
"tidyverse",
"data.table",
"rbenchmark",
"tensorflow",
"keras",
"tfdatasets"
)
install.packages(
setdiff(
packages, rownames(installed.packages())
)
)
for(pkg in packages){
library(pkg, character.only = TRUE)
}
DB_CACHE = glue(PATH_DB,"cache")
if(!dir.exists(DB_CACHE)){
dir.create(DB_CACHE)
}
#master list of all defined paths
PATH = ls()[unlist(lapply(ls(), function(vec) 'PATH' %in% strsplit(vec,"_")[[1]]))]
##############
# Load Data #
###############
train_labels = read_csv(getFilePath("train_labels"))
source('config.R')
PATH_DB = "C:/Users/denis/Documents/ACM40960 - Projects in Maths Modelling/database/"
PATH_WD = 'C:/Users/denis/Documents/GitHub/DAC_Project/R/'
# PATH_WD = 'C:/Users/denis/Documents/GitHub/DAC_Project/R/'
setwd(PATH_WD)
FILES_DB = c('train_data','train_labels')
getDB = function(db){
res = if(db == 'csv'){
glue(PATH_DB,'csv')
} else if (db == 'parquet'){
glue(PATH_DB,'parquet')
} else {
PATH_DB
}
return(res)
}
checkSplitsList = function(strings,split,seachTerm){
strings[unlist(lapply(strings, function(vec) seachTerm %in% strsplit(vec,glue("\\",split))[[1]]))]
}
getFiles = function(path){
list.files(get(path))
}
getFilePath = function(fileN, ext = ".csv", checkDBOnly = TRUE){
res = list()
pathsToCheck = if (checkDBOnly) 'PATH_DB' else PATH #restrict search to DB by default
for(path in pathsToCheck){
found = list.files(get(path),
recursive = TRUE,
full.names = TRUE,
pattern = glue(fileN,ext)
)
res = append(res, found)
}
if(length(res) == 0){ #Return null string if no file found
return("")
}
stopifnot("Multiple files found" = length(res) == 1)
return(res[[1]])
}
getCache = function(file, callbackFunc, prefix, chunkSize = 100000, override = FALSE){
filePath = getFilePath(file,".csv")
cacheName = glue(prefix,"-",file)
cachePath = getFilePath(cacheName,"")
if(!override){ #If were not override updating the current cache
if(!cachePath == ""){ #And we can find a cached file
if(!exists(cacheName)){
load(cachePath, envir = .GlobalEnv) #Load if cache not in memory
}
res = get(cacheName)
return(res)
}
}
#If we cant find cache on disk, move to chunking
# Load chunks and process using callbackFunc, assign to cacheName in the global env
assign(cacheName,
suppressWarnings(
read_csv_chunked(
filePath,
DataFrameCallback$new(callbackFunc),
chunk_size = chunkSize,
progress = TRUE
)
)
,envir = .GlobalEnv)
# Save cache to disk and return
cachePath = glue(PATH_DB,"cache/",cacheName)
save(list = cacheName, file = cachePath)
return(get(cacheName))
}
{function ()
if(!exists('train_data_N')){ #Check if train_data_N exists
cachePath = getFilePath("CSVRowCounts","")
if(cachePath == ""){ # Check if value cached
#Get counts and cache
train_data_N  <<-system(paste0("wc -l ", getFilePath("train_data",".csv")), intern=T) %>% str_trim %>% strsplit(" ") %>% unlist %>% first  %>% as.integer
test_data_N <<-system(paste0("wc -l ", getFilePath("test_data",".csv")), intern=T) %>% str_trim %>% strsplit(" ") %>% unlist %>% first  %>% as.integer
cachePath = glue(PATH_DB,"cache/CSVRowCounts")
save(list = c("test_data_N", "train_data_N"), file = cachePath)
} else {
# else load from cache
load(cachePath, envir = .GlobalEnv)
}
}
}()
removeNonNumerics <- function(data){
return(
data[ , -which(names(data) %in% c(
'S_2', 'B_30', 'B_38', 'D_114', 'D_116', 'D_117', 'D_120', 'D_126', 'D_63', 'D_64', 'D_66', 'D_68'))]
)
}
removeCleansedCols <- function(data){
return(
data[ , -which(names(data) %in% getColsToRemove())]
)
}
getVariance = function(file,override = FALSE){
f <- function(x, pos){
x %>% numericVariables %>% summarise_if(is.numeric, var, na.rm = TRUE)
}
getCache(file, f, prefix = "VARIANCE", override = override)
}
cleansCols_VARIANCE = function(file, threshold = 0.001){
x = getVariance(file)
colnames(x)[colMeans(x) < 0.001]
}
getNACounts = function(file,override = FALSE){
f <- function(x, pos){
x %>% numericVariables %>% is.na %>% colSums
}
getCache(file, f, prefix = "NA", override = override)
}
cleansCols_NA = function(file, threshold = 0.9){
#threshold = pct of NA in col
x = getNACounts(file)
colnames(x)[-which(colSums(x) <= round(train_data_N*threshold))]
}
flattenCorMatrix <- function(corMatrix) {
ut <- upper.tri(corMatrix)
data.frame(
cor  =(corMatrix)[upper.tri(corMatrix)],
row.names = paste( rownames(corMatrix)[row(corMatrix)[ut]], rownames(corMatrix)[col(corMatrix)[ut]], sep="-")
)
}
getCorolations = function(file,override = FALSE){
f <- function(x, pos){
x  %>% numericVariables %>% sapply(as.numeric) %>% as.matrix  %>% cor(use = "pairwise.complete.obs") %>% flattenCorMatrix() %>% t()
}
getCache(file, f, prefix = "COR", override = override)
}
cleansCols_COROLATION = function(file, threshold = 0.95){
x = getCorolations(file)
colnames(x)[which(colMeans(x) > threshold)] %>% strsplit("-")  %>% lapply('[[', 2) %>% unlist()
}
getColsToRemove = function(file = "train_data"){
Reduce(union,
list(
cleansCols_NA(file,threshold = 0.9),
cleansCols_COROLATION(file,threshold = 0.9),
cleansCols_VARIANCE(file,threshold = 0.001)
)
)
}
###
# read csv, cleanse, and write result back to new file
###
writeCleansedCSV = function(file, newFile, chunkSize = 100000){
file = getFilePath(file,".csv")
newFile = paste(c(newFile,"csv"), collapse = ".")
newFile = paste(c(strsplit(file, "/")[[1]] %>% head(-1),newFile), collapse = "/") #put new file in same dir as old
f = function(x,pos){
x = x %>%  left_join(train_labels, by="customer_ID") %>% removeCleansedCols %>% removeNonNumerics
write_csv(x, newFile, append = ifelse(pos == 1, FALSE, TRUE))
}
suppressWarnings(
read_csv_chunked(
file,
SideEffectChunkCallback$new(f),
chunk_size = chunkSize,
progress = TRUE
)
)
}
getColsToRemove()
data.frame(c(c("CIA", "Central Intelligence Agency"),
c("dplyr", "data.frame plyr, a tool for working with data in a rectangular format"),
c("ABC", "The first few letters of the alphabet")))
matrix(ncol = 2,data = c(c("CIA", "Central Intelligence Agency"),
c("dplyr", "data.frame plyr, a tool for working with data in a rectangular format"),
c("ABC", "The first few letters of the alphabet")))
matrix(ncol = 2,data = c("CIA", "Central Intelligence Agency",
"dplyr", "data.frame plyr, a tool for working with data in a rectangular format",
"ABC", "The first few letters of the alphabet"))
matrix(data = c("CIA", "Central Intelligence Agency",
"dplyr", "data.frame plyr, a tool for working with data in a rectangular format",
"ABC", "The first few letters of the alphabet"), byrow = T, ncol = 2)
